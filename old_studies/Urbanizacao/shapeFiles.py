###########################################################################################################################
import webRota as wr
import geopandas as gpd
import matplotlib.pyplot as plt
from shapely.geometry import box
from shapely.geometry import Polygon, MultiPolygon


###########################################################################################################################
# https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2022/Brasil/BR/BR_Municipios_2022.zip
##########################################################################################################################

##############################################################################################################
# Fun√ß√£o para filtrar √°reas urbanas por munic√≠pio  
def FiltrarAreasUrbanizadasPorMunicipio(municipio_nome, estado_sigla):    
    caminho_shapefile_areas = "../../resources/Urbanizacao/AU_2022_AreasUrbanizadas2019_Brasil.shp"
    caminho_shapefile_municipios = "../../resources/BR_Municipios_2022/BR_Municipios_2022.shp"
    
    # Carregar o shapefile de √°reas urbanizadas
    gdf_areas = gpd.read_file(caminho_shapefile_areas)
    
    # Carregar o shapefile de limites municipais
    gdf_municipios = gpd.read_file(caminho_shapefile_municipios)
    
    # Filtrar o munic√≠pio desejado (por nome ou c√≥digo)
    municipio_filtrado = gdf_municipios[(gdf_municipios['NM_MUN'] == municipio_nome) & (gdf_municipios['SIGLA_UF'] == estado_sigla)]
    
    # Verificar se o CRS dos dois shapefiles √© o mesmo
    if gdf_areas.crs != gdf_municipios.crs:
        gdf_areas = gdf_areas.to_crs(gdf_municipios.crs)
    
    # Realizar a interse√ß√£o espacial entre as √°reas urbanizadas e o munic√≠pio
    # areas_no_municipio = gpd.sjoin(gdf_areas, municipio_filtrado, op='within')
    areas_no_municipio = gpd.sjoin(gdf_areas, municipio_filtrado, predicate='intersects')

    
    # Filtrar pelas categorias de densidade
    # densidades = ['Densa', 'Pouco densa', 'Loteamento vazio']
    # areas_filtradas_por_densidade = areas_no_municipio[areas_no_municipio['densidade'].isin(densidades)]
    
    areas_filtradas_por_densidade = areas_no_municipio
    
    # Exibir o resultado filtrado por densidade
    # print(f"√Åreas urbanizadas filtradas para o munic√≠pio {municipio_nome} e densidades {densidades}:")
    # print(areas_filtradas_por_densidade)
    
    # Converter as geometrias de pol√≠gonos em polylines
    polylines = []
    for geometry in areas_filtradas_por_densidade['geometry']:
        if isinstance(geometry, Polygon):  
            polylines.append(list(geometry.exterior.coords))  # Transforma em lista de coordenadas
        elif geometry.geom_type == 'MultiPolygon':  
            for part in geometry.geoms:
                polylines.append(list(part.exterior.coords))  # Transforma em lista de coordenadas
  
    
    # Exibir as polylines geradas
    # print(f"Polylines geradas para as √°reas filtradas:")
    # print(polylines)
    

    # Retornar as polylines
    return polylines
##############################################################################################################


NOVA solu√ß√£o chargpt

Para garantir que as √°reas urbanizadas dentro de um munic√≠pio sejam mantidas e as partes que se estendem para fora sejam cortadas na fronteira do munic√≠pio, podemos usar a opera√ß√£o interse√ß√£o (intersection) do GeoPandas.
üîπ Passos principais:

    Carregar os shapefiles das √°reas urbanizadas e do munic√≠pio.
    Filtrar o munic√≠pio desejado pelo nome e estado.
    Garantir que ambos os datasets est√£o no mesmo CRS.
    Usar intersection para cortar as √°reas urbanizadas na fronteira do munic√≠pio.

üéØ O que essa vers√£o faz de diferente?

‚úÖ Corta as partes das √°reas urbanizadas que est√£o fora do munic√≠pio.
‚úÖ Mant√©m as partes das √°reas urbanizadas dentro do munic√≠pio.
‚úÖ Descarta √°reas que ficaram totalmente fora do munic√≠pio.
‚úÖ Retorna polylines para representar os contornos das √°reas urbanizadas cortadas.

üîπ Agora, mesmo que uma √°rea urbanizada ultrapasse os limites municipais, apenas a parte dentro da cidade ser√° mantida e usada.

üèó C√≥digo atualizado para cortar as √°reas urbanizadas na fronteira do munic√≠pio


import geopandas as gpd

def FiltrarAreasUrbanizadasPorMunicipio(municipio_nome, estado_sigla):    
    caminho_shapefile_areas = "../../resources/Urbanizacao/AU_2022_AreasUrbanizadas2019_Brasil.shp"
    caminho_shapefile_municipios = "../../resources/BR_Municipios_2022/BR_Municipios_2022.shp"
    
    # Carregar os shapefiles
    gdf_areas = gpd.read_file(caminho_shapefile_areas)
    gdf_municipios = gpd.read_file(caminho_shapefile_municipios)
    
    # Filtrar o munic√≠pio pelo nome e estado
    municipio_filtrado = gdf_municipios[(gdf_municipios['NM_MUN'] == municipio_nome) & 
                                        (gdf_municipios['SIGLA_UF'] == estado_sigla)]
    
    # Garantir que os sistemas de coordenadas (CRS) s√£o os mesmos
    if gdf_areas.crs != gdf_municipios.crs:
        gdf_areas = gdf_areas.to_crs(gdf_municipios.crs)

    # Criar um √∫nico pol√≠gono do munic√≠pio
    municipio_poligono = municipio_filtrado.unary_union  # Une todas as geometrias do munic√≠pio
    
    # Cortar as √°reas urbanizadas que extrapolam o munic√≠pio
    gdf_areas['geometry'] = gdf_areas['geometry'].intersection(municipio_poligono)

    # Remover geometrias vazias (√°reas que ficaram totalmente fora do munic√≠pio)
    gdf_areas = gdf_areas[~gdf_areas['geometry'].is_empty]
    
    # Converter os pol√≠gonos em polylines (listas de coordenadas)
    polylines = []
    for geometry in gdf_areas['geometry']:
        if geometry.is_empty:
            continue
        if geometry.geom_type == 'Polygon':  
            polylines.append(list(geometry.exterior.coords))  # Apenas o contorno
        elif geometry.geom_type == 'MultiPolygon':  
            for part in geometry.geoms:
                polylines.append(list(part.exterior.coords))  # Apenas o contorno de cada parte
  
    return polylines
